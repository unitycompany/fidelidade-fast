import React, { useState, useEffect, useCallback } from 'react';
import styled, { keyframes, css } from 'styled-components';
import { FiGift, FiStar, FiShoppingCart, FiCheck, FiX, FiLoader, FiRefreshCw, FiCopy, FiFilter } from 'react-icons/fi';
import { supabase } from '../services/supabase';
import { CATEGORIAS_PREMIOS } from '../utils/inicializarPremios';
import toast from 'react-hot-toast';

// Animações do AdminPanel
const fadeInUp = keyframes`
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
`;

const slideUp = keyframes`
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
`;

const fadeIn = keyframes`
  from { opacity: 0; }
  to { opacity: 1; }
`;

// Container principal otimizado
const Container = styled.div`
  min-height: 100vh;
  background: #f8fafc;
  padding: 1rem;
  font-family: 'Montserrat', sans-serif;
  
  @media (max-width: 900px) {
    padding: 0.5rem;
    min-height: calc(100vh - 64px);
  }
`;

const MainContent = styled.div`
  max-width: 1200px;
  margin: 0 auto;
  display: flex;
  flex-direction: column;
`;

const HeaderSection = styled.div`
  background: #fff;
  padding: 2rem;
  margin-bottom: 1rem;
  border-radius: 8px;
  box-shadow: 0 2px 12px rgba(0,0,0,0.05);
  text-align: center;
  
  @media (max-width: 900px) {
    padding: 1rem;
    border-radius: 4px;
  }
`;

const HeaderTitle = styled.h1`
  color: #2D3748;
  font-size: 1.8rem;
  font-weight: 700;
  margin: 0 0 0.5rem 0;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  
  @media (max-width: 600px) {
    font-size: 1.5rem;
  }
`;

const HeaderSubtitle = styled.p`
  color: #4A5568;
  font-size: 1rem;
  margin: 0;
  
  @media (max-width: 600px) {
    font-size: 0.9rem;
  }
`;

const PointsDisplay = styled.div`
  background: linear-gradient(135deg, #cc1515 0%, #9b0c0c 100%);
  color: white;
  padding: 1rem 2rem;
  border-radius: 8px;
  margin: 1rem 0;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 1.2rem;
  font-weight: 600;
  
  @media (max-width: 600px) {
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
  }
`;

// Remover a SidebarHeader - não é mais necessária
// const SidebarHeaderContainer = styled.div`...` - REMOVIDO
// const SidebarHeaderLogo = styled.img`...` - REMOVIDO
// const SidebarHeaderPoints = styled.div`...` - REMOVIDO
// const SidebarHeaderPointsValue = styled.div`...` - REMOVIDO
// const SidebarHeaderPointsLabel = styled.div`...` - REMOVIDO
// const SidebarHeaderFrase = styled.div`...` - REMOVIDO

// function SidebarHeader({ user }) {...} - REMOVIDO

// Container de filtros otimizado
const FilterContainer = styled.div`
  background: #fff;
  padding: 1.5rem;
  margin-bottom: 1rem;
  border-radius: 8px;
  box-shadow: 0 2px 12px rgba(0,0,0,0.05);
  
  @media (max-width: 900px) {
    padding: 1rem;
    border-radius: 4px;
  }
`;

const FilterTitle = styled.h3`
  color: #2D3748;
  margin-bottom: 1rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-weight: 600;
`;

const FilterButtons = styled.div`
  display: flex;
  gap: 0.75rem;
  flex-wrap: wrap;
`;

const FilterButton = styled.button`
  padding: 0.75rem 1.5rem;
  background: ${props => props.$active ? 'linear-gradient(135deg, #cc1515 0%, #9b0c0c 100%)' : 'transparent'};
  color: ${props => props.$active ? 'white' : '#2D3748'};
  border: 1px solid ${props => props.$active ? '#cc1515' : '#CBD5E0'};
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  
  &:hover {
    transform: translateY(-2px);
    border-color: #00000030;
    ${props => !props.$active && css`
      background: #EDF2F7;
    `}
  }
  
  @media (max-width: 768px) {
    padding: 0.6rem 1rem;
    font-size: 0.9rem;
  }
`;

// Container de prêmios otimizado
const PremiosContainer = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 1.5rem;
  padding: 0;
  
  @media (max-width: 600px) {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
`;

// Wrapper para prêmios
const PremiosWrapper = styled.div`
  background: #fff;
  padding: 1.5rem;
  border-radius: 8px;
  box-shadow: 0 2px 12px rgba(0,0,0,0.05);
  
  @media (max-width: 900px) {
    padding: 1rem;
    border-radius: 4px;
  }
`;

// Ajuste do PremiosHeader para responsividade
const PremiosHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  
  h2 {
    color: ${props => props.theme.colors.text};
    margin: 0;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-weight: ${props => props.theme.fontWeights.semibold};
  }
`;

// Ajuste do PremiosGrid para responsividade
const PremiosGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
  gap: 1.5rem;
  
  @media (max-width: 600px) {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
`;

// Ajuste do PremioCard para responsividade
const PremioCard = styled.div`
  padding: 1.8rem;
  transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  position: relative;
  border: 1px solid #f1f1f1;
  background: white;
  border-radius: 8px;
  box-shadow: 0 2px 12px rgba(0,0,0,0.08);
  overflow: hidden;
  
  &:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0,0,0,0.12);
  }
  
  @media (max-width: 600px) {
    padding: 1.2rem;
  }
`;

const PremioImage = styled.img`
  width: 100%;
  height: 200px;
  object-fit: cover;
  background: #f8fafc;
  border-radius: 4px;
  margin-bottom: 1rem;
`;

const PremioContent = styled.div`
  padding: 0;
`;

const PremioTitulo = styled.h3`
  color: #2D3748;
  font-size: 1.1rem;
  font-weight: 600;
  margin: 0;
  flex: 1;
`;

const PremioHeader = styled.div`
  display: flex;
  align-items: flex-start;
  gap: 1rem;
  margin-bottom: 1rem;
`;

const PremioIcon = styled.div`
  width: 60px;
  height: 60px;
  background: linear-gradient(135deg, #cc1515, #a70d0d);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 1.5rem;
  flex-shrink: 0;
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    top: 2px;
    left: 2px;
    right: 2px;
    bottom: 2px;
    background: linear-gradient(135deg, rgba(255,255,255,0.2), transparent);
    pointer-events: none;
  }
`;

const PremioInfo = styled.div`
  flex: 1;
`;

const PremioNome = styled.h3`
  color: ${props => props.theme.colors.text};
  font-size: 1.1rem;
  font-weight: ${props => props.theme.fontWeights.bold};
  margin: 0 0 0.25rem 0;
  line-height: 1.3;
`;

const PremioCategoria = styled.span`
  display: inline-block;
  background: ${props => props.theme.colors.gray100};
  color: #1e1e1e;
  padding: 0.25rem 0.6rem;
  font-size: 0.75rem;
  font-weight: ${props => props.theme.fontWeights.semibold};
  text-transform: capitalize;
`;

const PremioDescricao = styled.p`
  color: ${props => props.theme.colors.textSecondary};
  font-size: 0.9rem;
  line-height: 1.4;
  margin: 0.75rem 0 1rem 0;
`;

const PremioFooter = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 1rem;
`;

const PontosBadge = styled.div`
  background: linear-gradient(135deg, #38a169, #2f855a);
  color: white;
  padding: 0.6rem 1.2rem;
  font-weight: 700;
  font-size: 0.9rem;
  display: flex;
  align-items: center;
  justify-content: center;
  line-height: 100%;
  gap: 0.5rem;
  position: relative;
`;

const ResgatarButton = styled.button`
  padding: 0.6rem 1.2rem;
  background: ${props => props.disabled ?
    'linear-gradient(135deg, #cbd5e0, #a0aec0)' :
    'linear-gradient(135deg, #cc1515, #a70d0d)'};
  color: white;
  border: none;
  font-weight: 700;
  font-size: 0.9rem;
  cursor: ${props => props.disabled ? 'not-allowed' : 'pointer'};
  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  min-width: 130px;
  position: relative;
  overflow: hidden;
  
  &::before {
    content: '';
    position: absolute;
    top: 2px;
    left: 2px;
    right: 2px;
    bottom: 2px;
    background: linear-gradient(135deg, rgba(255,255,255,0.2), transparent);
    pointer-events: none;
    opacity: ${props => props.disabled ? 0 : 1};
  }
  
  &:active:not(:disabled) {
    transform: translateY(-1px) scale(1.02);
  }
  
  &:disabled {
    opacity: 0.7;
    transform: none;
  }
  
  @media (max-width: 768px) {
    padding: 0.7rem 1.2rem;
    font-size: 0.85rem;
    min-width: 120px;
  }
`;

const Modal = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  padding: 1rem;
  backdrop-filter: blur(5px);
  animation: ${fadeIn} 0.3s ease-out;
`;

// Ajuste do ModalContent para responsividade
const ModalContent = styled.div`
  background: white;
  padding: 2rem;
  max-width: 400px;
  width: 100%;
  text-align: center;
  box-shadow: 0 2px 16px rgba(0,0,0,0.10);
  animation: ${slideUp} 0.3s ease-out;
  
  @media (max-width: 600px) {
    padding: 1.2rem 0.5rem 1rem 0.5rem;
    border-radius: 12px;
  }
`;

const ModalTitle = styled.h3`
  color: ${props => props.theme.colors.text};
  font-size: 1.3rem;
  font-weight: ${props => props.theme.fontWeights.bold};
  margin-bottom: 1rem;
`;

const ModalText = styled.p`
  color: ${props => props.theme.colors.textSecondary};
  line-height: 1.5;
  margin-bottom: 1.5rem;
`;

const ModalButtons = styled.div`
  display: flex;
  gap: 1rem;
  
  @media (max-width: 768px) {
    flex-direction: column;
  }
`;

const ModalButton = styled.button`
  flex: 1;
  padding: 0.875rem;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.4rem;
  border: none;
  font-weight: ${props => props.theme.fontWeights.semibold};
  cursor: pointer;
  transition: all 0.3s ease;
  
  ${props => props.$primary ? css`
    background: ${props.theme.colors.gradientPrimary};
    color: white;
    
    &:hover {
      transform: translateY(-2px);
      box-shadow: ${props.theme.shadows.lg};
    }
  ` : css`
    background: ${props.theme.colors.gray400};
    color: white;
    
    &:hover {
      background: ${props.theme.colors.gray500};
    }
  `}
`;

const LoadingContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  height: 200px;
  color: ${props => props.theme.colors.textSecondary};
`;

const EmptyState = styled.div`
  text-align: center;
  padding: 3rem;
  color: ${props => props.theme.colors.textSecondary};
  
  .icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    color: ${props => props.theme.colors.gray400};
  }
  
  h3 {
    color: ${props => props.theme.colors.text};
    margin-bottom: 1rem;
    font-weight: ${props => props.theme.fontWeights.semibold};
  }
  
  p {
    margin: 0;
    font-size: 0.9rem;
  }
`;

const CodigoResgate = styled.div`
  background: ${props => props.theme.colors.gradientSuccess};
  color: white;
  padding: 1.5rem;
  border-radius: 5px;
  margin: 1rem 0;
  text-align: center;
  
  .codigo {
    font-size: 1.5rem;
    font-weight: ${props => props.theme.fontWeights.bold};
    margin-bottom: 0.5rem;
  }
  
  .instrucao {
    font-size: 0.9rem;
    opacity: 0.9;
  }
`;

const CopiarButton = styled.button`
  background: rgba(255, 255, 255, 0.2);
  border: 1px solid rgba(255, 255, 255, 0.3);
  color: white;
  padding: 0.5rem 1rem;
  border-radius: ${props => props.theme.radii.md};
  cursor: pointer;
  margin-top: 0.5rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.9rem;
  transition: all 0.3s ease;
  
  &:hover {
    background: rgba(255, 255, 255, 0.3);
  }
`;

const PremiosNovo = ({ user, onUserUpdate, currentPage = 'premios', onPageChange }) => {
  const [premios, setPremios] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filtro, setFiltro] = useState('todos');
  const [modalResgate, setModalResgate] = useState(null);
  const [processandoResgate, setProcessandoResgate] = useState(false);
  const [codigoResgate, setCodigoResgate] = useState(null);
  const [userAtualizado, setUserAtualizado] = useState(user);

  // Função para buscar dados atualizados do usuário
  const buscarDadosUsuario = useCallback(async () => {
    if (!user?.id) return user;

    try {
      const { data, error } = await supabase
        .from('clientes_fast')
        .select('saldo_pontos, total_pontos_ganhos, total_pontos_gastos')
        .eq('id', user.id)
        .single();

      if (error) throw error;

      const dadosAtualizados = {
        ...user,
        saldo_pontos: data.saldo_pontos,
        total_pontos_ganhos: data.total_pontos_ganhos,
        total_pontos_gastos: data.total_pontos_gastos
      };

      setUserAtualizado(dadosAtualizados);

      return dadosAtualizados;
    } catch (error) {
      console.error('Erro ao buscar dados do usuário:', error);
      return user;
    }
  }, [user?.id]); // Apenas user.id como dependência

  // Buscar dados do usuário sempre que o user.id mudar
  useEffect(() => {
    if (user?.id) {
      buscarDadosUsuario();
    }
  }, [user?.id, buscarDadosUsuario]);

  // Listener para atualizações globais do usuário
  useEffect(() => {
    const handleUserUpdate = () => {
      console.log('📊 PremiosNovo: Recebido evento de atualização de usuário');
      if (user?.id) {
        buscarDadosUsuario();
      }
    };

    window.addEventListener('userUpdated', handleUserUpdate);

    return () => {
      window.removeEventListener('userUpdated', handleUserUpdate);
    };
  }, [user?.id, buscarDadosUsuario]);

  const carregarPremios = useCallback(async () => {
    try {
      setLoading(true);

      let query = supabase
        .from('premios_catalogo')
        .select('*')
        .eq('ativo', true);

      if (filtro !== 'todos') {
        query = query.eq('categoria', filtro);
      }

      const { data, error } = await query.order('pontos_necessarios', { ascending: true });

      if (error) throw error;

      setPremios(data || []);
    } catch (error) {
      console.error('Erro ao carregar prêmios:', error);
      toast.error('Erro ao carregar prêmios');
    } finally {
      setLoading(false);
    }
  }, [filtro]);

  // Carregar prêmios quando filtro muda
  useEffect(() => {
    carregarPremios();
  }, [filtro]); // Remover carregarPremios da dependência

  const handleResgate = async () => {
    if (!modalResgate) return;

    try {
      setProcessandoResgate(true);

      // SEMPRE buscar dados atualizados do banco antes do resgate
      const { data: clienteAtual, error: clienteError } = await supabase
        .from('clientes_fast')
        .select('saldo_pontos, total_pontos_gastos')
        .eq('id', user.id)
        .single();

      if (clienteError) throw clienteError;

      if (clienteAtual.saldo_pontos < modalResgate.pontos_necessarios) {
        toast.error('Pontos insuficientes');
        return;
      }

      // Criar resgate
      const { data: resgateData, error: resgateError } = await supabase
        .from('resgates')
        .insert([{
          cliente_id: user.id,
          premio_id: modalResgate.id,
          pontos_utilizados: modalResgate.pontos_necessarios,
          status: 'confirmado'
        }])
        .select('codigo_resgate')
        .single();

      if (resgateError) throw resgateError;

      // Calcular novos valores
      const novoSaldo = clienteAtual.saldo_pontos - modalResgate.pontos_necessarios;
      const novoTotalGastos = (clienteAtual.total_pontos_gastos || 0) + modalResgate.pontos_necessarios;

      // Atualizar saldo do cliente no banco
      const { error: updateError } = await supabase
        .from('clientes_fast')
        .update({
          saldo_pontos: novoSaldo,
          total_pontos_gastos: novoTotalGastos
        })
        .eq('id', user.id);

      if (updateError) throw updateError;

      // Registrar no histórico (usando campos mínimos obrigatórios)
      try {
        const { error: historicoError } = await supabase
          .from('historico_pontos')
          .insert([{
            cliente_id: user.id,
            tipo_operacao: 'resgate',
            pontos: modalResgate.pontos_necessarios,
            saldo_anterior: clienteAtual.saldo_pontos,
            saldo_posterior: novoSaldo,
            observacoes: `Resgate: ${modalResgate.nome} - Código: ${resgateData?.codigo_resgate || 'SEM_CODIGO'}`
          }]);

        if (historicoError) {
          console.error('Erro ao registrar histórico:', historicoError);
          // Não bloquear o resgate se o histórico falhar
        }
      } catch (histError) {
        console.error('Erro no histórico (não crítico):', histError);
        // Histórico é opcional, não bloquear o resgate
      }

      // Buscar dados ATUALIZADOS do banco após a operação
      await buscarDadosUsuario();

      // Disparar evento global para outros componentes atualizarem
      window.dispatchEvent(new CustomEvent('userUpdated'));

      const codigo = resgateData?.codigo_resgate || 'SEM_CODIGO';
      setCodigoResgate(codigo);

      toast.success('Resgate realizado com sucesso!');

      // Fechar modal após 3 segundos para dar tempo de ver o código
      setTimeout(() => {
        fecharModal();
      }, 3000);

    } catch (error) {
      console.error('Erro no resgate:', error);
      toast.error(`Erro ao realizar resgate: ${error.message}`);
    } finally {
      setProcessandoResgate(false);
    }
  };

  const copiarCodigo = () => {
    if (codigoResgate) {
      navigator.clipboard.writeText(codigoResgate);
      toast.success('Código copiado!');
    }
  };

  const fecharModal = () => {
    setModalResgate(null);
    setCodigoResgate(null);
  };

  const categorias = [
    { value: 'todos', label: 'Todos os Prêmios', icon: FiGift },
    { value: 'ferramentas', label: 'Ferramentas', icon: FiGift },
    { value: 'vale_compras', label: 'Vale-Compras', icon: FiShoppingCart },
    { value: 'brindes', label: 'Brindes', icon: FiStar }
  ];

  const premiosDestaque = premios.filter(p => p.destaque === true);

  if (loading) {
    return (
      <Layout>
        <SidebarHeader user={userAtualizado} />
        <MainContent>
          <LoadingContainer>
            <FiLoader className="animate-spin" size={32} />
          </LoadingContainer>
        </MainContent>
      </Layout>
    );
  }

  return (
    <Container>
      <MainContent>
        <HeaderSection>
          <HeaderTitle>
            <FiGift />
            Catálogo de Prêmios
          </HeaderTitle>
          <HeaderSubtitle>
            Conquiste prêmios incríveis com seus pontos!
          </HeaderSubtitle>
          <PointsDisplay>
            <FiStar />
            {userAtualizado?.saldo_pontos?.toLocaleString() || '0'} pontos
          </PointsDisplay>
        </HeaderSection>

        <FilterContainer>
          <FilterTitle>
            <FiFilter />
            Filtrar por Categoria
          </FilterTitle>
          <FilterButtons>
            {categorias.map(categoria => {
              const IconComponent = categoria.icon;
              return (
                <FilterButton
                  key={categoria.value}
                  $active={filtro === categoria.value}
                  onClick={() => setFiltro(categoria.value)}
                >
                  <IconComponent />
                  {categoria.label}
                </FilterButton>
              );
            })}
          </FilterButtons>
        </FilterContainer>

        <PremiosWrapper>
          {loading ? (
            <LoadingContainer>
              <FiLoader className="animate-spin" size={32} />
              <p>Carregando prêmios...</p>
            </LoadingContainer>
          ) : premiosFiltrados.length === 0 ? (
            <EmptyState>
              <FiGift size={48} />
              <h3>Nenhum prêmio encontrado</h3>
              <p>Não há prêmios disponíveis para esta categoria no momento.</p>
            </EmptyState>
          ) : (
            <PremiosContainer>
              {premiosFiltrados.map(premio => (
                <PremioCard key={premio.id}>
                  <PremioImage src={premio.imagem_url} alt={premio.nome} />
                  <PremioContent>
                    <PremioHeader>
                      <PremioTitulo>{premio.nome}</PremioTitulo>
                      <CategoriaBadge $categoria={premio.categoria}>
                        {premio.categoria}
                      </CategoriaBadge>
                    </PremioHeader>
                    <PremioDescricao>{premio.descricao}</PremioDescricao>
                    <PremioFooter>
                      <PontosBadge>
                        <FiStar />
                        {premio.pontos_necessarios}
                      </PontosBadge>
                      <ResgatarButton
                        $disabled={userAtualizado?.saldo_pontos < premio.pontos_necessarios}
                        onClick={() => setModalResgate(premio)}
                      >
                        {userAtualizado?.saldo_pontos >= premio.pontos_necessarios ? (
                          <>
                            <FiShoppingCart />
                            Resgatar
                          </>
                        ) : (
                          <>
                            <FiX />
                            Insuficiente
                          </>
                        )}
                      </ResgatarButton>
                    </PremioFooter>
                  </PremioContent>
                </PremioCard>
              ))}
            </PremiosContainer>
          )}
        </PremiosWrapper>
                  key={premio.id}
                  $destaque={premiosDestaque.includes(premio)}
                >
                  <PremioHeader>
                    <PremioIcon>
                      <FiGift />
                    </PremioIcon>
                    <PremioInfo>
                      <PremioNome>{premio.nome}</PremioNome>
                      <PremioCategoria>{premio.pontos_necessarios} pts</PremioCategoria>
                    </PremioInfo>
                  </PremioHeader>

                  <PremioDescricao>{premio.descricao}</PremioDescricao>

                  <PremioFooter>

                    <ResgatarButton
                      disabled={!userAtualizado || userAtualizado.saldo_pontos < premio.pontos_necessarios}
                      onClick={() => setModalResgate(premio)}
                    >
                      {userAtualizado?.saldo_pontos >= premio.pontos_necessarios ? (
                        <>
                          <FiShoppingCart />
                          Resgatar
                        </>
                      ) : (
                        <>
                          <FiX />
                          Insuficiente
                        </>
                      )}
                    </ResgatarButton>
                  </PremioFooter>
                </PremioContent>
              </PremioCard>
            ))}
          </PremiosContainer>
        )}
      </PremiosWrapper>

      {/* Modais permanecem iguais */}
      {modalResgate && !codigoResgate && (
          <Modal onClick={(e) => e.target === e.currentTarget && fecharModal()}>
            <ModalContent>
              <ModalTitle>Confirmar Resgate</ModalTitle>
              <ModalText>
                Você deseja resgatar <strong>{modalResgate.nome}</strong> por {modalResgate.pontos_necessarios} pontos?
              </ModalText>
              <ModalText>
                Seu saldo atual: <strong>{userAtualizado?.saldo_pontos} pontos</strong>
                <br />
                Saldo após resgate: <strong>{(userAtualizado?.saldo_pontos || 0) - modalResgate.pontos_necessarios} pontos</strong>
              </ModalText>
              <ModalButtons>
                <ModalButton onClick={fecharModal}>
                  Cancelar
                </ModalButton>
                <ModalButton $primary onClick={handleResgate} disabled={processandoResgate}>
                  {processandoResgate ? <FiLoader className="animate-spin" /> : <FiCheck />}
                  {processandoResgate ? 'Processando...' : 'Confirmar'}
                </ModalButton>
              </ModalButtons>
            </ModalContent>
          </Modal>
        )}

        {codigoResgate && (
          <Modal onClick={(e) => e.target === e.currentTarget && fecharModal()}>
            <ModalContent>
              <ModalTitle>🎉 Resgate Realizado!</ModalTitle>
              <ModalText>
                Seu resgate foi processado com sucesso!
              </ModalText>

              <CodigoResgate>
                <div className="codigo">{codigoResgate}</div>
                <div className="instrucao">
                  Para resgatar seu produto, dirija-se à loja Fast mais próxima de você
                </div>
                <div className="instrucao" style={{ fontSize: '0.9rem', marginTop: '0.5rem', opacity: 0.8 }}>
                  Apresente este código na loja para retirar seu prêmio
                </div>
                <div className="aviso-estoque" style={{
                  fontSize: '0.85rem',
                  marginTop: '1rem',
                  padding: '0.75rem',
                  background: '#fff3cd',
                  border: '1px solid #ffeaa7',
                  borderRadius: '6px',
                  color: '#856404'
                }}>
                  ⚠️ <strong>Importante:</strong> A disponibilidade do produto está sujeita ao estoque da loja.
                  Recomendamos entrar em contato antes de se dirigir à loja.
                </div>
                <CopiarButton onClick={copiarCodigo}>
                  <FiCopy />
                  Copiar Código
                </CopiarButton>
              </CodigoResgate>

              <ModalButtons>
                <ModalButton $primary onClick={fecharModal}>
                  <FiCheck />
                  Entendi
                </ModalButton>
              </ModalButtons>
            </ModalContent>
          </Modal>
        )}
      </MainContent>
    </Container>
  );
};

export default PremiosNovo;
